@using Microsoft.AspNetCore.Identity
@inject SignInManager<SoftUniFinalProject.Infrastructure.Data.IdentityModels.ApplicationUser> SignInManager
@inject UserManager<SoftUniFinalProject.Infrastructure.Data.IdentityModels.ApplicationUser> UserManager
@using static SoftUniFinalProject.Core.Constants.RoleConstants;

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="AddRole">Add Role</a>
    </li>
    <li class="nav-item">
            <a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="AddUserToRole">Add User To Role</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="" asp-controller="Attendance" asp-action="MyEvents">My Events</a>
    </li>
    <li class="nav-item">
        <a  class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity?.Name!</a>
        </li>
        var currUser = await UserManager.FindByNameAsync(User?.Identity?.Name);
        @if (await UserManager.IsInRoleAsync(currUser, AdministratorRole))
        {
       <li class="nav-item">
           <a class="nav-link text-dark" asp-area="Admin" asp-controller="Home" asp-action="Users" title="Back">Admin Interface</a>
       </li>
        }
   
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="User" asp-action="Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="User" asp-action="Login">Login</a>
    </li>
}
</ul>
